C Operator Precedence (Highest to Lowest)
__________________________________________________

1. Primary (Left → Right)
   ()       Function call
   []       Array subscript
   .        Structure member
   ->       Structure pointer member

2. Unary (Right → Left)
   + -      Unary plus/minus
   ! ~      Logical NOT / Bitwise NOT
   ++ --    Pre/post increment/decrement
   * &      Pointer dereference / Address-of
   sizeof   Size in bytes

3. Multiplicative (Left → Right)
   * / %

4. Additive (Left → Right)
   + -

5. Shift (Left → Right)
   << >>

6. Relational (Left → Right)
   < <= > >=

7. Equality (Left → Right)
   == !=

8. Bitwise AND (Left → Right)
   &

9. Bitwise XOR (Left → Right)
   ^

10. Bitwise OR (Left → Right)
    |

11. Logical AND (Left → Right)
    &&

12. Logical OR (Left → Right)
    ||

13. Conditional (Right → Left)
    ? :

14. Assignment (Right → Left)
    = += -= *= /= %= <<= >>= &= ^= |=

15. Comma (Left → Right)
    ,
__________________________________________________________________________

##Examples of C Operator Precedence :


1. Multiplicative vs Additive
   int x = 2 + 3 * 4;   // * evaluated first → 2 + 12 = 14

2. Unary vs Multiplicative
   int y = -2 * 3;      // unary minus first → (-2) * 3 = -6

3. Relational vs Arithmetic
   int z = 5 + 3 > 7;   // + first → 8 > 7 → 1 (true)

4. Logical AND vs OR
   int a = 1 && 0 || 1; // && first → (1 && 0) || 1 → 0 || 1 → 1

5. Assignment associativity
   int b, c;
   b = c = 5;           // right-to-left → c=5, then b=c → b=5

6. Conditional operator
   int m = 5;
   int n = (m > 0) ? 1 : 2; // m>0? yes → n=1

7. Comma operator
   int p;
   p = (1, 2, 3);       // evaluates left to right, result is 3 → p=3

8. Bitwise operators
   int q = 5 | 2 & 3;   // & first → 2&3=2, then 5|2=7

    

In 'C', a macro is a piece of code that is given a name. 
When the program is compiled, the preprocessor replaces the macro name 
everywhere in the code with its actual value or code.
ðŸ‘‰ Macros are defined using the #define directive.
ðŸ‘‰ They are handled before compilation, during preprocessing.

1. Object-like Macro: A simple replacement of a constant value.
snippet:
#define PI 3.1416

int main() {
    double area = PI * 5 * 5; // PI will be replaced with 3.1416
}

2. Function-like Macro: Works like a function but just text replacement.
snippet : 
#define SQUARE(x) ((x) * (x))

int main() {
    int a = 5;
    int b = SQUARE(a); // expands to ((a) * (a))
}



